import unittest
from binary_search_tree import *

class TestLab4(unittest.TestCase):

    def testIsEmpty(self):
        tst = BinarySearchTree()
        self.assertTrue(tst.is_empty())
        tst.insert(4)
        self.assertFalse(tst.is_empty())
        tst.insert(5)
        tst.insert(6)
        tst.insert(7)
        self.assertFalse(tst.is_empty())
        tst2 = BinarySearchTree()
        self.assertTrue(tst2.is_empty())

    def testSearch(self):
        tst = BinarySearchTree()
        tst.insert(4)
        self.assertTrue(tst.search(4))
        tst.insert(5)
        tst.insert(6)
        tst.insert(7)
        self.assertFalse(tst.search(33))
        self.assertTrue(tst.search(6))
        tst2 = BinarySearchTree()
        self.assertEqual(tst.search(2), False)

    def testInsert(self):
        tst = BinarySearchTree()
        self.assertTrue(tst.is_empty())
        self.assertEqual(tst.tree_height(), None)
        tst.insert(4)
        self.assertFalse(tst.is_empty())
        self.assertEqual(tst.tree_height(), 0)
        tst.insert(5)
        tst.insert(6)
        tst.insert(7)
        self.assertEqual(tst.tree_height(), 3)

    def testFindMin(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(5)
        tst.insert(2)
        tst.insert(112)
        self.assertEqual(tst.find_min(), (2, None))
        tst.insert(222)
        tst.insert(1)
        tst.insert(343)
        self.assertEqual(tst.find_min(), (1, None))
        tst2 = BinarySearchTree()
        self.assertEqual(tst2.find_min(), None)

    def testFindMax(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(5)
        tst.insert(2)
        tst.insert(112)
        self.assertEqual(tst.find_max(), (112, None))
        tst.insert(3)
        tst.insert(34343)
        tst.insert(333)
        self.assertEqual(tst.find_max(), (34343, None))
        tst2 = BinarySearchTree()
        self.assertEqual(tst2.find_max(), None)

    def testTreeHeight(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(3)
        tst.insert(2)
        self.assertEqual(tst.tree_height(), 2)
        tst.insert(1)
        self.assertEqual(tst.tree_height(), 3)
        tst.insert(1)
        self.assertEqual(tst.tree_height(), 3)
        tst.insert(1222)
        self.assertEqual(tst.tree_height(), 3)

    def testInorderList(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(3)
        tst.insert(13)
        self.assertEqual(tst.inorder_list(), [3, 4, 13])
        tst.insert(23)
        tst.insert(1)
        self.assertEqual(tst.inorder_list(), [1, 3, 4, 13, 23])
        tst2 = BinarySearchTree()
        self.assertEqual(tst2.inorder_list(), None)
        tst.insert(5)
        tst.insert(17)
        tst.insert(14)
        self.assertEqual(tst.inorder_list(), [1, 3, 4, 5, 13, 14, 17, 23])

    def testPreorderList(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(3)
        tst.insert(13)
        self.assertEqual(tst.preorder_list(), [4, 3, 13])
        tst.insert(23)
        tst.insert(1)
        self.assertEqual(tst.preorder_list(), [4, 1, 3, 13, 23])
        tst2 = BinarySearchTree()
        self.assertEqual(tst2.preorder_list(), None)
        tst.insert(5)
        tst.insert(17)
        tst.insert(14)
        self.assertEqual(tst.preorder_list(), [4, 1, 3, 5, 13, 14, 17, 23])

    def testLevelorderList(self):
        tst = BinarySearchTree()
        tst.insert(4)
        tst.insert(3)
        tst.insert(13)
        self.assertEqual(tst.level_order_list(), [4, 3, 13])
        tst.insert(23)
        tst.insert(1)
        self.assertEqual(tst.level_order_list(), [4, 3, 13, 1, 23])
        tst.insert(5)
        tst.insert(17)
        tst.insert(14)
        self.assertEqual(tst.level_order_list(), [4, 3, 13, 1, 5, 23, 17, 14])
        tst2 = BinarySearchTree()
        self.assertEqual(tst2.level_order_list(), None)

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])

if __name__ == '__main__': 
    unittest.main()
